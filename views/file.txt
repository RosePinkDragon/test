import React, { useEffect, useRef } from "react";
import InputBase from "@mui/material/InputBase";
import { styled } from "@mui/material/styles";

interface PinInputProps {
  value: string;
  maxLength?: number;
  onChange: (value: string) => void;
}

const PinInputContainer = styled("div")(({ theme }) => ({
  display: "flex",

  "& > *": {
    margin: theme.spacing(0, 1),
  },

  input: {
    textAlign: "center",
    fontSize: 24,
    width: 48,
    height: 48,
    borderBottom: `2px solid ${theme.palette.divider}`,
    borderRadius: 0,
    outline: "none",
    borderColor: "gray",
    boxShadow: "0 2px 4px 0 rgba(0, 0, 0, 0.1)",
    transition: "all 0.3s ease-in-out",

    "&:focus": {
      borderColor: theme.palette.primary.main,
      boxShadow: `0 0 6px ${theme.palette.primary.main}`,
      borderBottomWidth: 3,
    },
  },
}));

const PinInput: React.FC<PinInputProps> = ({
  value = "",
  maxLength = 4,
  onChange,
}) => {
  const firstInputRef = useRef<HTMLInputElement | null>(null);

  useEffect(() => {
    if (value.length === maxLength) {
      firstInputRef.current?.blur();
    } else {
      firstInputRef.current?.focus();
    }
  }, [value, maxLength]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = event.target.value;
    if (newValue.length <= maxLength) {
      onChange(newValue);
    }
  };

  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {
    if (event.key === "Backspace" && value.length === 1) {
      onChange("");
    }
  };

  const inputProps = { maxLength };

  return (
    <PinInputContainer>
      {[...Array(maxLength)].map((_, index) => (
        <InputBase
          key={index}
          type="password"
          value={value[index] || ""}
          onChange={handleChange}
          onKeyDown={handleKeyDown}
          inputProps={inputProps}
          autoFocus={index === 0}
          inputRef={index === 0 ? firstInputRef : undefined}
        />
      ))}
    </PinInputContainer>
  );
};

export default PinInput;
